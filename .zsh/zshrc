########################################################################
# $HOME/.zshrc of Julius Plenz, zshrc/plenz/com
########################################################################
# Feel free to  copy stuff from this config (some  lines are also copied
# from other people's configs), but I do not advise you to use this file
# as your ~/.zshrc without modification,  it might mess around with your
# system too  much. But, if  you are fearless, try  it out and  see what
# happens! Also, there are some really strange key bindings defined. :-)
########################################################################

# minimal zsh {{{
# if a minimal zsh is requested, provide one! (via min-zsh alias)
# below is the minimal setup used from ~/.zshrc.minimal:
#
# : setopt nobeep noclobber autocd completeinword correct rmstarwait
# : eval `dircolors`
# : PROMPT='%B%Umin%u>%b '
# : bindkey -e
# : autoload -U compinit && compinit
#
# I cannot think of another way to do this. Sadly, zsh doesnt provide an
# command line option to override the user configuration file...
if [[ $0 == "min-zsh" ]]; then
    if [[ -f $HOME/.zshrc.minimal ]]; then
        . $HOME/.zshrc.minimal && return
    else
        print "Warning: cannot find ~/.zshrc.minimal file."
        print "Loading default configuration instead!"
    fi
fi
# }}}

# helper functions (will be unfunctioned later) {{{
loading() { print -n ${(r:$COLUMNS-2-$#1:: :):-loading $1...}'\r' }
is_root_shell() { [[ $USER == root ]] }
# }}}

# host-based settings {{{
######################################################################
# Source Local Zshrc If Available
######################################################################

  loading "local zshrc"
  # [[ $SHELL == "/bin/zsh-static" ]] || zmodload -i zsh/zprof

  add-to-path() { path+=("$@") }
  local hostname=$(cat /etc/hostname)

  [[ ! -z "$SSH_TTY" ]] && export SSH_HOSTNAME=$hostname

  [[ -z $HOME ]] && print 'I AM HOMELESS!!!'

  export PATH=${PATH:-/usr/local/bin:/usr/bin:/bin}
  export TMPDIR=${TMPDIR:-/tmp}
  export LC_ALL=${LC_ALL:-en_US.UTF-8}
  export CDPATH=${CDPATH:-.:..}

  local greeting_message="welcome to $hostname\!"

  if [[ -r $HOME/.zsh/zshrc.local ]]; then
    # may use/set: add-to-path, greeting_message
    source $HOME/.zsh/zshrc.local
  fi
  # Note that ~/.zsh/zshrc.local.end will be sourced at the end for overrides!

  unfunction add-to-path
  unset hostname

# }}}

# limits {{{
######################################################################
# Limits
######################################################################

# ulimit -u 1024
# ulimit -v `cat /proc/meminfo | head -1 | tr -s ' ' | cut -d' ' -f2`
# ulimit -v ${${(s. .)${(M)${(f)"$(</proc/meminfo)"}##MemTotal: *}}[2]}

# }}}

# options {{{
######################################################################
# Options
######################################################################
  loading options

  setopt \
    autocd \
    autopushd \
    nobeep \
    braceccl \
    cdablevars \
    noclobber \
    completeinword \
    correct \
    cshjunkiehistory \
    extendedglob \
    extendedhistory \
    functionargzero \
    globcomplete \
    histallowclobber \
    histignoredups \
    histignorespace \
    histsavenodups \
    histverify \
    nohup \
    interactive \
    interactivecomments \
    nolistambiguous \
    nolistbeep \
    listpacked \
    longlistjobs \
    magicequalsubst \
    menucomplete \
    monitor \
    numericglobsort \
    posixbuiltins \
    promptcr \
    promptsubst \
    pushdignoredups \
    pushdminus \
    pushdsilent \
    pushdtohome \
    rmstarwait \
    transientrprompt \
    sharehistory \
    shoptionletters \

# }}}

# environment {{{
######################################################################
# Othe Environment Variables
######################################################################
  loading environment

  export CC=gcc
  export COLORTERM=yes

  export EDITOR=${EDITOR:-vim}
  export BROWSER=${BROWSER:-elinks}
  export PAGER=${PAGER:-less}
  export READNULLCMD=${READNULLCMD:-$PAGER}
# colors for less without compiled termcap files (curses feature)
  export LESS_TERMCAP_mb=$'\e[01;31m'
  export LESS_TERMCAP_md=$'\e[01;31m'
  export LESS_TERMCAP_me=$'\e[0m'
  export LESS_TERMCAP_se=$'\e[0m'
  export LESS_TERMCAP_so=$'\e[01;44;33m'
  export LESS_TERMCAP_ue=$'\e[0m'
  export LESS_TERMCAP_us=$'\e[01;32m'

  export LESS=XFRaeiM # the XFR is important here: don't mess with the terminal!
  export BC_ENV_ARGS=$HOME/.bcrc # scale=4
  export GREP_COLORS="ms=01;32"
  export MANWIDTH=80

  HISTSIZE=15000 # Größe der History
  SAVEHIST=10000 # Maximale Anzahl der Einträge, die gespeichert werden
  HISTFILE=$HOME/.zsh_history # Speicherort der History
  is_root_shell && HISTFILE=$HOME/.zsh_history.root

# Farben, die 'ls' nutzen soll, werden auch in Completions genutzt (s.u.)
  export LS_COLORS='no=0:fi=0:di=32:ln=36:or=1;40:mi=1;40:pi=31:so=33:b'\
'd=44;37:cd=44;37:ex=35:*.jpg=1;32:*.jpeg=1;32:*.JPG=1;32:*.gif=1;32:*.'\
'.png=1;32:*.jpeg=1;32:*.ppm=1;32:*.pgm=1;32:*.pbm=1;32:*.c=1;33:*.C=1;'\
'33:*.h=1;33:*.cc=1;33:*.awk=1;33:*.pl=1;33:*.bz2=1;35:*.gz=1;31:*.tar='\
'1;31:*.zip=1;31:*.lha=1;31:*.lzh=1;31:*.arj=1;31:*.tgz=1;31:*.taz=1;31'\
':*.html=1;32:*.htm=1;32:*.doc=1;32:*.txt=1;32:*.o=1;36:*.a=1;36:*.php3=1;31'
  autoload -U colors && colors

# Default keymap is set up beforehand:
  bindkey -v

# }}}

# prompt {{{
######################################################################
# The Prompt
######################################################################
  loading prompt
# old stuff
# Hier besteht das Prompt aus dem aktuellen Verzeichnis ($PWD) auf 11
# Zeichen reduziert, einem ',' und der anzahl an laufenden Jobs.
# precmd () {
#   TMPPATH="        "$PWD
#   # SHORTPATH=${(M)TMPPATH%???????????}
#   SHORTPATH=${(M)TMPPATH%?????????}
#   # PS1=$(echo "%{\033[0;36m%}$SHORTPATH%{\033[0m%},%{\033[0;31m%}%j%{\033[0m%}%% ")
#   # PS1="#x:gaMfYa%{ - jdez hvksi dfla*%{ $%}gaau f/ jyvqfu dvyza!"
#   PS1=$(echo "$cyan$SHORTPATH$nocolor,$red%j$nocolor%# ")
#   settitle "zsh: "$PWD
#   # PS1="zsh; "
# }

# minimalistic prompt - way better!
  PROMPT='%B%U'${SSH_HOSTNAME:-zsh}'%u>%b '
  RPROMPT='%(?..%(130?::%S[%?]%s))%1(j.%B(%j%)%b.)$(__git_prompt_info)$(__dir_is_writable)'
  is_root_shell && PROMPT="%{$fg[red]%}$PROMPT%{$fg[red]%}"
  SPROMPT='zsh: correct '%R' to '%r' ? ([Y]es/[N]o/[E]dit/[A]bort) '

  chpwd() {
    __update_dir_is_writable
    __git_info
  }

# 2010-04-23: Trap interrupt and re-define the error code. This makes
# sense if you want to display in your prompt the return value of a
# command when it failed (%(?..%?)), but are annoyed that Ctrl-c
# (interrupt) also causes to exit abnormally. With the above RPROMPT
# definition, interrupts are sort of discarded...
  TRAPINT()
  {
    return $(( 128 + $1 ))
  }

# 2009-11-28: display a small exclamation mark at in prompt if
#             $PWD is not writable!
  __update_dir_is_writable() {
    [[ -w $PWD ]]
    __dir_writable=$?
  }
  __dir_is_writable() {
    [[ $__dir_writable -eq 1 ]] && print -n '!'
  }

# 2009-11-16: add some git info on right side when entering a git directory
#             if inside git-controlled dir, check branch name every command!
  __is_git_repo() { # check return value
    git rev-parse --git-dir &>/dev/null
  }
  __git_info() {
    if __is_git_repo ; then
      __git_repo=1
      __git_project_name=${__git_project_name:-${${$(readlink \
        -f $(git rev-parse --git-dir 2>|/dev/null)):h}##*/}}
    else
      __git_repo=0
      __git_project_name=
    fi
  }
  __git_branch_name() {
    print ${${${${(f)"$(git branch --no-color \
      2>/dev/null)"}:#[^*]*}##\* }:-no branch}
  }
  __git_status_dirty() {
    [[ -n "$(git status -uno --porcelain)" ]] && \
      print -n "%{$fg[red]%}★" || print -n "%{$fg[green]%}∴"
    print "%{$fg[default]%}"
  }
  __git_prompt_info() {
    [[ __git_repo -eq 1 ]] || return
    [[ -z "$__git_project_name" ]] && __git_info
    print " %B$(__git_status_dirty)%b %B${__git_project_name}%b" \
      "on %B$(__git_branch_name)%b"
  }
# }}}

# functions {{{
######################################################################
# Functions
######################################################################
  loading functions

# autoload own functions. _*-functions will be loaded by the compinit builtin
  fpath=(~/.zfunc $fpath)
  (: ~/.zfunc/(^_*)(.)) 2>|/dev/null && \
  autoload -U ${fpath[1]}/(^_*)(.:t)
  autoload -U zcalc zmv zargs

# so ... if you find out what this does, you're very good!
  if [[ ! -e ~/.zsh/zshrc ]]; then
    while read l; do
      [[ $l == *\#x:* ]] && greeting_message=$(print \
      ${${(L)l##*x:}//[^-a-z !]/}|tr f-ia-cdeq-zj-p a-z) && break;
    done < ~/.zshrc 2>/dev/null
  fi

  preexec() {
      settitle "$1"
  }

# 2008-08-16: massively useful! I have never viewed more than one manpage at a
# time. so the second, third etc argument denote search patterns passed to less instead.
  man() {
    if [[ $# -eq 0 || $1 == -* ]]; then
      print "Warning: this is the shell function man(), not" =man
      print "Second and consecutive arguments denote search patterns,"
      print "no whatsoever options will be passed to the man command."
      return 1
    fi
    [[ $1 == <-> ]] && local section=$1 && shift
    local cmd=$1
    shift
    if (( $# )); then
      PAGER="less -p '$*'" command man $section $cmd
    else
      command man $section $cmd
    fi
  }

  cdtemp() {
    local t
    t=`mktemp -d`
    echo $t
    builtin cd $t
  }

# 2010-03-28: search for symbol in static libs
  findsym() {
    [[ -z $1 ]] && return 1

    SYMBOL=$1
    LIBDIR=${2:-/usr/lib}

    for lib ($LIBDIR/*.a) nm $lib &>/dev/null | grep -q $SYMBOL && \
        print "symbol found in $lib\n -L$LIBDIR -l${${lib:t:r}#lib}"
  }

# 2010-11-24: pretty print `df' output
# (thanks to Axel B. for showing me!)
  df() {
    if [[ -z "$*" ]]; then
      command df -TPh | column -t
    else
      command df $*
    fi
  }

# 2011-10-19: tmux shortcut for creating/attaching named sessions
  tm() {
    [[ -z "$1" ]] && { echo "usage: tm <session>" >&2; return 1; }
    tmux has -t $1 && tmux attach -t $1 || tmux new -s $1
  }

# }}}

# functions (one-liners) {{{
######################################################################
# Functions, one-liners: "Better Aliases"
######################################################################

# "m"ake directory and "cd" to it
  mcd() { nocorrect mkdir -p "$@"; cd "$@" }  # mkdir && cd

# List all executables which contain $1
  lsexe() { ls -l --color=auto $^path/*$1*(*N) }

# Change XTerm title
  settitle() {
    case $TERM in
    xterm*|*rxvt*)
      print -n "\033]0;$@\007\r";;
      # \r = carriage return. ugly hack. better ideas?
    *)
      : ;;
    esac
  }

# 2005-05-29: similar to vared, but for aliases and functions
  aliased() { vared   "aliases[$1]" }
  funced()  { vared "functions[$1]" }

  compctl -a aliased
  compctl -F funced

# 2008-03-05
  histgrep () { fc -fl -m "*(#i)$1*" 1 | grep -i --color $1 }

# }}}

# aliases {{{
######################################################################
# Aliase
######################################################################
  loading aliases

  alias  j='jobs -l'
  alias  1='fg %1'
  alias  2='fg %2'
  alias  3='fg %3'
  alias  4='fg %4'
  alias  5='fg %5'
  alias  6='fg %6'
  alias 11='bg %1'
  alias 22='bg %2'
  alias 33='bg %3'
  alias 44='bg %4'
  alias 55='bg %5'
  alias 66='bg %6'

  alias d='dirs -v'
  alias bc='bc -q'

  alias Emutt='vim ~/.mutt/muttrc'
  alias Ealias='vim ~/.mutt/alias'
  alias Evim='vim ~/.vimrc'

# Editing and reloading this file
  alias  __='$EDITOR ~/.zshrc'
  alias ___='source  ~/.zshrc'

  alias fcc-save-update='rm ~/.mutt/fcc-save-hooks; alias2fcc > ~/.mutt/fcc-save-hooks'

  alias  gget='gpg --recv-keys'
  alias glist='gpg --fingerprint --list-keys'
  alias  gput='gpg --send-keys'
  alias gsigs='gpg --list-sigs'

  alias 600='chmod 600'
  alias 700='chmod 700'
  alias 644='chmod 644'
  alias 755='chmod 755'

  alias ls='ls --color=auto'
  alias ll='ls -lA' # -A excludes "." and "..", else behave likes "-a"

  alias grep="grep -i --color=auto"

# 2005-12-24: Hide certain commands from being saved to history
# (uses hist_ignore_space option)
  for i in cd wipe; do
    eval "alias $i=' $i'"
  done

# vim typo correction
  alias vi==vim # magicequalsubst!
  alias vom=vim
  alias vm=vim
  alias vmi=vim
  alias :{w,q,wq,qa,wqa,x}{,!}='echo this is a zsh, dumbass!'

  alias make='CDPATH="" make'

  alias W='noglob wget'
  alias W4='W -4'
  alias W6='W -6'
  alias mirror="W --mirror --no-parent --convert-links"

  alias myip='lynx -dump tnx.nl/ip'

# Start vanilla versions of some programs
  alias null-mutt='mutt -n -f /dev/null -F /dev/null'
  alias null-zsh='zsh -xf'
  alias min-zsh='ARGV0=min-zsh command zsh'
  alias null-vim='vim -u NONE'
  alias null-irssi='irssi --config=/dev/null'

  alias Ztags="man zshcompsys '   standard tags'"
  alias Zstyles="man zshcompsys '   standard styles'"
  alias Zcompadd="man zshcompwid '^builtin commands'"
  alias Z='man zshall'

  alias _mute-mplayer='mplayer -ao none'

# Global Aliases -- expanded everywhere, not just at position $0
  alias -g C='| wc -l'
  alias -g G='| grep'
  alias -g P='| less'
  alias -g H='| head -n $(( +LINES?LINES-4:10 ))'
  alias -g T='| tail -n $(( +LINES?LINES-4:10 ))'
  alias -g V='| vim -'
  alias -g X='| xargs'
  alias -g NE="2>|/dev/null" # Mnemonic: No Errors
  alias -g NO="&>|/dev/null" # Mnemonic: No Output

  alias suvi="sudo vim"

  alias A="sudo aptitude"
  alias Ai="A install"
  alias Ar="A remove"
  alias Au="A update"
  alias As="A search"
  alias Ash="A show"

# 2006-12-17: Better prompt for sudo
  alias sudo="sudo -p '%u->%U, enter password: ' " # note the space!!

  alias top10='print -l -- ${(o)history%% *} | uniq -c | sort -nr | head -10'

# 2010-09-16: these days I use rsync a lot...
  alias R='rsync -avhP'
  alias Rd='rsync -avhP --delete'

# 2009-11-14: git config versioning
# FIXME: There's no real completion. Must pass env to _git :-(
  conf() {
    case $1 in
      rm|clean) print "Dude, don't do that. It'll delete your \$HOME";;
      *) command env GIT_DIR=$HOME/.configs.git GIT_WORK_TREE=$HOME git $@;;
    esac
  }

  alias giu='git remote update --prune'

# 2012-05-25
  alias pf="perldoc -f"

# }}}

# completion {{{
######################################################################
# Completions
######################################################################
  loading completion

# completion system loader
  autoload -U compinit
  if ! compinit; then
    alias zstyle=:
    alias compdef=:
  fi
  zmodload -i zsh/complist

# completer: easy and low-profile for first try,
# approximation on second and extreme approximation
# on consecutive tries
  zstyle -e ':completion:*' completer '
    case $_last_try in
      $HISTNO$BUFFER$CURSOR)
        reply=(_ignored _approximate _complete)
        _last_try="$HISTNO$BUFFER${CURSOR}x"
        ;;
      $HISTNO$BUFFER${CURSOR}x)
        reply=(_approximate:-extreme _complete)
        ;;
      *)
        _last_try="$HISTNO$BUFFER$CURSOR"
        reply=(_expand_alias _complete _prefix)
        ;;
    esac
    '

# general settings
  zstyle ':completion:*' verbose yes
  zstyle ':completion:*' squeeze-slashes yes
  zstyle ':completion:*' menu select
  zstyle ':completion:*' use-cache yes
  zstyle ':completion:*' cache-path ~/.zshcompcache
  is_root_shell && zstyle ':completion:*' cache-path ~/.zshcompcache.root
  zstyle ':completion::complete:*' rehash true
  zstyle ':completion:*:expand-alias:*' global true

# _approximate completer configuration
  zstyle -e ':completion:*:approximate:*' max-errors \
    '(( reply=($#PREFIX+$#SUFFIX)/3 ))'
  zstyle -e ':completion:*:approximate-extreme:*' max-errors \
    '(( reply=($#PREFIX+$#SUFFIX)/1.2 ))'
  zstyle ':completion:*:(correct|approximate[^:]#):*' original false
  zstyle ':completion:*:(correct|approximate[^:]#):*' tag-order '! original'

  zstyle ':completion:*:*:(^rm):*:(all-|)files' ignored-patterns \
    "(*.BAK|*.bak|*.alt|*.old|*.aux|*.toc|*.swp|*\~)"

# german umlauts in file names, partial words
  zstyle ':completion:*' matcher-list \
    'm:ss=ß m:ue=ü m:ue=Ü m:oe=ö m:oe=Ö m:ae=ä m:ae=Ä
     m:{a-z}={A-Z} r:|[-_.+,]=** r:|=*'

# some "own" completers:

# 2007-10-03: complete word from history.
# Note this may be the single coolest snippet in this config.
  zle -C hist-complete complete-word _generic
  bindkey '^N'  hist-complete
  zstyle ':completion:hist-complete:*' completer _history
  zstyle ':completion:hist-complete:*' sort false # newest match first
  zstyle ':completion:hist-complete:*' range 12000:8000
  zstyle ':completion:hist-complete:*' matcher-list 'b:=*'
  zstyle ':completion:hist-complete:*' remove-all-dups yes

# the "usual" history search
  bindkey '^R' history-incremental-search-backward
  bindkey '^X^R' history-incremental-search-forward

# 2008-08-06: expansion
  zle -C custom-expand complete-word _generic
  bindkey '^E' custom-expand
  zstyle ':completion:custom-expand:*' completer _expand
  zstyle ':completion:custom-expand:*' tag-order 'expansions all-expansions' -
  zstyle ':completion:custom-expand:*' group-order all-expansions expansions

# 2008-08-16: massively useful: try to extract file names from previous
# command. If there is none, also check the two commands before the previous.
# this assumes that you copied, moved, created or downloaded files in the
# current directory (unless the file contains a path name). Also, when files
# contain question marks these are almost surely the indicator for a web page
# that was downloaded, so the garbage after the ? is ignored. If a file is
# prefixed by something like user@host: (like with scp), this prefix is also
# removed. Only files that really exist and with names longer than three
# characters are taken into account.
  _extract_files() {
    setopt localoptions extendedglob functionargzero nullglob noglobsubst
    integer back=${1:-1}
    local expl args files dirs
    args=(${(z)${history[$[HISTCMD-back]]}})
    shift args # remove command
    for f in $args; do
      # ignore options and short strings
      [[ $f == -* || $#f -le 3 ]] && continue
      local -U possible
      possible=($f ${f:t} ${f##*:})
      # if it's a messed-up url, try to glob from filename
      [[ $#f -gt 5 && $f == (#b)([^\?]##)\?* ]] && possible+=(${match[1]:t}*)
      for p in $possible; do
        [[ -f $~p ]] && files+=($~p)
        [[ -d $~p ]] && dirs+=($~p)
      done
    done
    if (( $#files + $#dirs )); then
      local ret=1
      _tags files directories
      while _tags; do
        _requested files expl 'files from previous command' \
          compadd -- $files && ret=0
        _requested directories expl 'directories from previous command' \
          compadd -- $dirs && ret=0
        (( ret )) || break
      done
    else
      (( back == 3 )) && _message 'no file names found' && return 1
      (( back++ )) && $0 $back # call this function again
    fi
  }
  zle -C extract-files complete-word _generic
  bindkey '^Xf' extract-files
  zstyle ':completion:extract-files:*' completer _extract_files
  zstyle ':completion:extract-files:*' matcher-list 'b:=*'
# don't list directories unless there are no files
  zstyle ':completion:extract-files:*' tag-order files directories

# 2008-07-07
  zstyle ':completion::*:(bindkey|zle):*:widgets' ignored-patterns '.*'
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# format of informational and error messages
  zstyle ':completion:*' auto-description 'specify: %d'
  zstyle ':completion:*:corrections' format $'%{\e[0;31m%}%d (errors: %e, orig `%o\')%{\e[0m%}'
  zstyle ':completion:*:descriptions' format $'%{\e[0;31m%}completing %B%d%b%{\e[0m%}'
  zstyle ':completion:*:messages' format $'%{\e[0;31m%}%d%{\e[0m%}'
  zstyle ':completion:*:warnings' format $'%{\e[0;31m%}No matches for: %d%{\e[0m%}'
  zstyle ':completion:*' group-name ''

# 2008-02-06
  zstyle ':completion:*:default' select-prompt '%SMatch %M    Line %L     %P%s'

# zstyle ':completion:*' list-colors ''
# `ma' is the code for the current selection entry (highlight color)
# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}" 'ma=01;41'

  zstyle ':completion::*:sudo:*' command-path {,/usr,/usr/local}/sbin $path

  zstyle ':completion:*:ssh:*' tag-order 'users hosts'
  zstyle ':completion:*:ssh:*' group-order users hosts
# colors for scp remote completion
  zstyle ':completion::*:(scp|rsync):*' list-colors \
    "=(#b)(*)/=0="${${${(s.:.)LS_COLORS}[(r)di=<->]}/di=/} \
    '='${^${(M)${(s.:.)LS_COLORS}:#\**}}

# Do not put file "X" in selection menu if already present on command line
  zstyle ':completion::*:(mv|cp|rm|chmod|chown|vim):*' ignore-line true

  zstyle ':completion:*:cd:*' tag-order local-directories path-directories
  zstyle ':completion::*:cd:*:path-directories' ignored-patterns '.'
  zstyle ':completion::*:-tilde-:*:*' group-order named-directories users

# Completion for kill, with colors. No, really.
  zstyle ':completion:*:kill:argument-rest:*' command 'ps xf -u $USER -o pid,%cpu,cmd'
  zstyle ':completion:*:*:kill:argument-rest:processes' list-colors \
    '=(#b) #(<->) #<->.<->[ |\_]#([-/_[:alnum:][:digit:]]#)*=0=01;31=01;32'
  zstyle ':completion:*:strace:option-p-1:*' command 'ps xf -u $USER -o pid,cmd'
  zstyle ':completion:*:strace:option-p-1:option-p-1' list-colors \
    '=(#b) #(<->)[ |\_]#([-/_[:alnum:][:digit:]]#)*=0=01;31=01;32'

  zstyle ':completion:*:manuals' separate-sections true
  zstyle ':completion:*:manuals.(^1*)' insert-sections true

# 2008-07-06: if there is an alias of function name the same as a command name
# prefer the command name! otherwise, two identical matches appear in the
# completion menu *gnah* (meaning: try everything but aliases and functions; if
# there's no match, try everything else)
  zstyle ':completion::*:-command-:*:*' tag-order '! aliases functions'

# 2011-03-01
  compdef _pdf zathura

# 2011-10-19
# stolen from completion function _tmux
  function __tmux-sessions() {
      local expl
      local -a sessions
      sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
      _describe -t sessions 'sessions' sessions "$@"
  }
  compdef __tmux-sessions tm

# 2012-01-19: complete words from current pane
# Note this might be the second coolest config snippet in this config.
  _tmux_pane_words() {
    local expl
    local -a w
    if [[ -z "$TMUX_PANE" ]]; then
      _message "not running inside tmux!"
      return 1
    fi
    w=( ${(u)=$(tmux capture-pane -J -p)} )
    _wanted values expl 'words from current tmux pane' compadd -a w
  }
  zle -C tmux-pane-words-prefix   complete-word _generic
  zle -C tmux-pane-words-anywhere complete-word _generic
  bindkey '^Xt' tmux-pane-words-prefix
  bindkey '^X^X' tmux-pane-words-anywhere
  zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' completer _tmux_pane_words
  zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' ignore-line current
  zstyle ':completion:tmux-pane-words-anywhere:*' matcher-list 'b:=* m:{A-Za-z}={a-zA-Z}'

# 2008-09-04: abc<C-O> is like *abc*<Tab>
  zle -C match-arbitrary-position complete-word _generic
  zstyle ':completion:match-arbitrary-position:*' completer _complete
  zstyle ':completion:match-arbitrary-position:*' matcher-list 'm:{A-Za-z}={a-zA-Z} l:|=* r:|=*'
  bindkey '^O' match-arbitrary-position

# }}}

# key bindings {{{
######################################################################
# Keybindings. Vi rules!
######################################################################
  loading keys

# Home- und End-Keys.
  bindkey '\e[1~' beginning-of-line
  bindkey '\e[4~' end-of-line

# ^B inserts !$ (last argument) ein.
  bindkey '^B' insert-last-word

# prefix history search with arrow keys
  bindkey "^[[A"   up-line-or-search
  bindkey "^[[B" down-line-or-search
  bindkey "^[OA"   up-line-or-search
  bindkey "^[OB" down-line-or-search

# 2005-04-13: From the GRML Zshrc: ^P inserts previous word on current line
  insert-last-typed-word() { zle insert-last-word -- 0 -1 }; \
  zle -N insert-last-typed-word
  bindkey "^P" insert-last-typed-word

# 2005-02-27: navigate in a completion menu
# These commands only work *after* loading zsh/complist.
  bindkey -M menuselect 'h' vi-backward-char
  bindkey -M menuselect 'j' vi-down-line-or-history
  bindkey -M menuselect 'k' vi-up-line-or-history
  bindkey -M menuselect 'l' vi-forward-char
  bindkey -M menuselect 'i' accept-and-menu-complete
  bindkey -M menuselect 'u' undo
# 2008-07-05: Jump between categories of matches
  bindkey -M menuselect 'n' vi-forward-blank-word
  bindkey -M menuselect 'b' vi-backward-blank-word

# 2005-09-14: caphusos Tip
  run-with-sudo () { LBUFFER="sudo $LBUFFER" }
  zle -N run-with-sudo
  bindkey '^Xs' run-with-sudo

# 2005-10-28: push line to stack
  bindkey '^K' push-line

  bindkey '^_' undo
  bindkey -M vicmd u undo

  bindkey '^XH' run-help
  autoload run-help-git

# 2008-07-07: insert date
  insert-date() { LBUFFER+="$(date +%F)" }
  zle -N insert-date
  bindkey '^Xd' insert-date

# 2007-04-08: EH07, nice idea! (tcsh-like)
# When Tab is pressed on an empty(!) command line,
# the contents of the directory are printed (`ls`)
# instead of a menu list of all executables:
# % cd /usr/src/
# % <Tab>
# linux-2.6.14.3        9p
# fuse.tar.bz2          thinkpad.tar.gz
  complete-or-list() {
    [[ $#BUFFER != 0 ]] && { zle complete-word ; return 0 }
    echo
    ls
    zle reset-prompt
  }
  zle -N complete-or-list
  bindkey '^I' complete-or-list

# 2008-08-14: if line ends with two spaces, pipe output to $PAGER
accept-line() {
  [[ $BUFFER[-2,-1] == '  ' ]] && BUFFER[-1]='P'
  zle .accept-line
}
zle -N accept-line

# 2007-10-03: temporarily display $PWD
  display-pwd() {
    if [[ ${(M)RPROMPT#??} == "%/" ]]; then
      RPROMPT=${RPROMPT#%/}
    else
      RPROMPT="%/"$RPROMPT # <- PWD
    fi
    zle reset-prompt
  }
  zle -N display-pwd
  bindkey '^F' display-pwd

  _jump_after_first_word() { CURSOR=$#BUFFER[(w)1] }
  zle -N jump-after-first-word _jump_after_first_word
  bindkey '^x1' jump-after-first-word

  _cut_inner_word()
  {
    setopt localoptions extendedglob
    LBUFFER=${LBUFFER%%[^ ]#}
    RBUFFER=${RBUFFER##[^ ]#}
  }
  zle -N cut-inner-word _cut_inner_word
  bindkey '^xc' cut-inner-word
  bindkey -M vicmd 'ciw' cut-inner-word

# 2010-10-22: zsh-users/15470
  rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
      LBUFFER+=/..
    else
      LBUFFER+=.
        fi
  }
  zle -N rationalise-dot
  bindkey . rationalise-dot

# completions might miss the point: then force files completion manually
  zle -C complete-files complete-word _generic
  zstyle ':completion:complete-files:*' completer _files
  zstyle ':completion:complete-files:*' force-list always
  bindkey "^X^I" complete-files

# 2012-06-06: quick git commands
  bindkey -s "^G " "git diff\n"
  bindkey -s "^G^@" "git diff\n"  # ctrl-space
  bindkey -s "^G." "git diff --cached\n"
  bindkey -s "^Gw" "git diff --word-diff\n"
  bindkey -s "^G^G" "git status\n"
  bindkey -s "^Gc" "git commit -v\n"
  bindkey -s "^Ga" "git add \t"

# Delete last path component, from http://www.zsh.org/mla/users/2005/msg01314.html
  backward-delete-to-slash() {
    integer pos=$CURSOR
    while (( pos > 1 )); do
      if [[ $LBUFFER[--pos] = / ]]; then
        LBUFFER=${LBUFFER[1,pos]}
        return 0
      fi
    done
    return 1
  }
  zle -N backward-delete-to-slash
  bindkey "^T" backward-delete-to-slash

# "Bracketed paste mode", adapted from http://www.zsh.org/mla/users/2011/msg00367.html
  bindkey -N paste
  bindkey -R -M paste "^@"-"\M-^?" paste-insert
  bindkey '^[[200~' _start_paste
  bindkey -M paste '^[[201~' _end_paste
  # insert "; " rather than carriage returns when pasting newlines
  # -> no unwillfull execution of commands
  bindkey -M paste -s '^M' ' ; '

  zle -N _start_paste
  zle -N _end_paste
  zle -N paste-insert _paste_insert
  zle -N zle-line-init _zle_line_init
  zle -N zle-line-finish _zle_line_finish

  _start_paste() {
    bindkey -A paste main
  }

  _end_paste() {
    bindkey -v
    LBUFFER+=$_paste_content
    unset _paste_content
  }

  _paste_insert() {
    _paste_content+=$KEYS
  }

  _zle_line_init() {
    # Tell terminal to send escape codes around pastes.
    [[ $TERM == rxvt-unicode || $TERM == xterm || $TERM == screen ]] && printf '\e[?2004h'
  }

  _zle_line_finish() {
    # Tell it to stop when we leave zle, so pasting in other programs
    # doesn't get the ^[[200~ codes around the pasted text.
    [[ $TERM == rxvt-unicode || $TERM == xterm || $TERM == screen ]] && printf '\e[?2004l'
  }

# }}}

# hashes {{{
######################################################################
# Hashs
######################################################################

  hash -d s=/dev/shm

# }}}

# misc {{{
######################################################################
# Sonstiges
######################################################################
  loading misc

  umask 066
# }}}

# clean up {{{
  print -n ${(l:$COLUMNS-1:: :)}'\r'
  print -n $greeting_message
  if (( $#greeting_message + 35 < COLUMNS )); then
    print "   ($(uname -rom))"
  else
    print
  fi
  unset greeting_message
  unfunction loading is_root_shell
# }}}

# {{{ If there's something else to clean up locally...
  if [[ -r $HOME/.zsh/zshrc.local.end ]]; then
    source $HOME/.zsh/zshrc.local.end
  fi
# }}}

# autostart.bat {{{
  [[ $(conf rev-parse --symbolic-full-name HEAD) == "refs/heads/local" ]] ||
    print -P "%BWarning: not on local config branch!%b"
  [[ -z "$TMUX" && ! -z "$SSH_CONNECTION" ]] && tm main
  [[ $TTY == '/dev/tty1' ]] && exec startx
  [[ $PWD != $HOME ]] && RPROMPT="%/"

# Avoid starting the shell with a "dirty" $?
  true
# }}}

# vim:set sw=2 fdm=marker nowrap: EOF
